syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";

package deci.corestate.v1beta1;
option go_package = "corestate";

// AuthRequest represents that state for an inbound request to auth. It tracks
// this until the Session is started, at which time it is replaced.
//
// It is keyed by a unique identifier for this flow
message AuthRequest {
  string client_id = 1;
  string redirect_uri = 2;
  string state = 3;
  repeated string scopes = 4;
  string nonce = 5;
  enum ResponseType {
    UNKNOWN = 0;
    CODE = 1;
    TOKEN = 2;
  }
  ResponseType response_type = 6;
}

// Session represents an authenticated user from the time they are issued a
// code, until their last refresh/access token expires.
message Session {
  string client_id = 1;
  repeated string scopes = 2;
  // metadata is implementation-specific state for this "user". it is threaded
  // through all of the steps in the process. This should contain the
  // information required to serve requests to this service.
  google.protobuf.Any metadata = 3;

  // The authorization code that was issued for the code flow.
  StoredToken auth_code = 4;
  // The access tokens that have been issued to the end user, keyed by the ID
  map<string, StoredToken> access_tokens = 5;
  // The refresh tokens that have been issued to the end user, keyed by the ID
  map<string, StoredToken> refresh_tokens = 6;
}

enum TokenType {
  UNKNOWN = 0;
  AUTH_CODE = 1;
  ACCESS_TOKEN = 2;
  REFRESH_TOKEN = 3;
}

// StoredToken represents the session-persisted state of a token
// we issued to a user
message StoredToken {
  TokenType token_type = 1;
  // bcrypted version of the token that was issued to the user
  bytes bcrypted = 2;
  // when this token expires
  google.protobuf.Timestamp expires_at = 3;
  // if this token has been forced expired
  bool expired = 4;
}

// UserToken is the value we issue directly to users. The message is serialized,
// then base64 encoded to make up the issued version.
message UserToken {
  // The type of token this actually id
  TokenType token_type = 1;
  // the ID of the session this token corresponds to
  string session_id = 2;
  // identifier of this token, to look it up
  string token_id = 3;
  // the token itself, to be compared to the bcrypt version on the backend
  bytes token = 4;
}
