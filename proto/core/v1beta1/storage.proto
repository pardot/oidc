syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";

package oidc.core.v1beta1;
option go_package = "core";

// AuthRequest represents that state for an inbound request to auth. It tracks
// this until the Session is started, at which time it is replaced.
//
// It is keyed by a unique identifier for this flow
message AuthRequest {
  string redirect_uri = 2;
  string state = 3;
  repeated string scopes = 4;
  string nonce = 5;
  enum ResponseType {
    UNKNOWN = 0;
    CODE = 1;
    TOKEN = 2;
  }
  ResponseType response_type = 6;
}

// Session represents an authenticated user from the time they are issued a
// code, until their last refresh/access token expires.
message Session {
  // The unique identifier for this session.

  string id = 12;
  enum Stage {
    // A request to authenticate someone has been received, but upstream has not
    // authenticated the user.
    REQUESTED = 0;
    // Code flow was requested, and a code has been issued.
    CODE = 1;
    // An access token has been issued to the user, but the session is not for
    // offline access (aka no refresh token)
    ACCESS_TOKEN_ISSUED = 2;
    // An access token has been issued, along with a refresh token.
    REFRESHABLE = 3;
  }
  // stage represents where in the overall lifecycle this session is.
  Stage stage = 7;

  // request stores information about the original request we received.
  AuthRequest request = 8;

  // the client ID this session is bound to.
  string client_id = 13;

  // the scopes that have been granted for this session
  repeated string scopes = 14;

  // metadata is implementation-specific state for this "user". it is threaded
  // through all of the steps in the process. This should contain the
  // information required to serve requests to this service.
  google.protobuf.Any metadata = 3;

  // The authorization code that was issued for the code flow.
  StoredToken auth_code = 4;
  // if the auth code has been previously redeemed. If we get a subsequent
  // redemption, we should drop the whole session
  //
  // https://tools.ietf.org/html/rfc6819#section-4.4.1.1
  bool auth_code_redeemed = 9;

  // The current access token, if one has been issued. It's expiration time
  // should always be checked.
  StoredToken access_token = 5;

  // The currently valid refresh token for this session. I
  StoredToken refresh_token = 6;

  // The time the whole session should be expired at. It should be garbage
  // collected at this time.
  google.protobuf.Timestamp expires_at = 11;

  // reserving the first two fields for future expansion. If we need to change
  // the persisted schema, we may be able to use these to peek at the message
  // type, or implement self-describing messages.
  reserved 1, 2;
}

enum TokenType {
  UNKNOWN = 0;
  AUTH_CODE = 1;
  ACCESS_TOKEN = 2;
  REFRESH_TOKEN = 3;
}

// StoredToken represents the session-persisted state of a token
// we issued to a user
message StoredToken {
  TokenType token_type = 4;
  // bcrypted version of the token that was issued to the user
  bytes bcrypted = 5;
  // when this token expires
  google.protobuf.Timestamp expires_at = 3;
}

// UserToken is the value we issue directly to users. The message is serialized,
// then base64 encoded to make up the issued version.
message UserToken {
  // The type of token this actually is
  TokenType token_type = 5;
  // the ID of the session this token corresponds to
  string session_id = 6;
  // identifier of this token, to look it up
  string token_id = 3;
  // the token itself, to be compared to the bcrypt version on the backend
  bytes token = 4;
}
