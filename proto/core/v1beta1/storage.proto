syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";

package oidc.core.v1beta1;
option go_package = "core";

// AuthRequest represents the information that the caller requested
// authorization with.
message AuthRequest {
  string redirect_uri = 1 [ json_name = "redirect_uri" ];
  string state = 2 [ json_name = "state" ];
  repeated string scopes = 3 [ json_name = "scopes" ];
  string nonce = 4 [ json_name = "nonce" ];
  enum ResponseType {
    UNKNOWN = 0;
    CODE = 1;
    TOKEN = 2;
  }
  ResponseType response_type = 5 [ json_name = "response_type" ];
}

// Authorization represents the information that the authentication process
// authorized the user for.
message Authorization {
  repeated string scopes = 1 [ json_name = "scopes" ];
  string acr = 2 [ json_name = "acr" ];
  string amr = 3 [ json_name = "amr" ];
  google.protobuf.Timestamp authorized_at = 4 [ json_name = "authorized_at" ];
}

// Session represents an authenticated user from the time they are issued a
// code, until their last refresh/access token expires.
message Session {
  // The unique identifier for this session.

  string id = 3 [ json_name = "id" ];
  enum Stage {
    // A request to authenticate someone has been received, but upstream has not
    // authenticated the user.
    REQUESTED = 0;
    // Code flow was requested, and a code has been issued.
    CODE = 1;
    // An access token has been issued to the user, but the session is not for
    // offline access (aka no refresh token)
    ACCESS_TOKEN_ISSUED = 2;
    // An access token has been issued, along with a refresh token.
    REFRESHABLE = 3;
  }
  // stage represents where in the overall lifecycle this session is.
  Stage stage = 4 [ json_name = "stage" ];

  // request stores information about the original request we received.
  AuthRequest request = 5 [ json_name = "request" ];

  // tracks the details this session was actually authorized for
  Authorization authorization = 6 [ json_name = "authorization" ];

  // the client ID this session is bound to.
  string client_id = 7 [ json_name = "client_id" ];

  // the scopes that have been granted for this session
  repeated string scopes = 8 [ json_name = "scopes" ];

  // The authorization code that was issued for the code flow.
  StoredToken auth_code = 9 [ json_name = "auth_code" ];
  // if the auth code has been previously redeemed. If we get a subsequent
  // redemption, we should drop the whole session
  //
  // https://tools.ietf.org/html/rfc6819#section-4.4.1.1
  bool auth_code_redeemed = 10 [ json_name = "auth_code_redeemed" ];

  // The current access token, if one has been issued. It's expiration time
  // should always be checked.
  StoredToken access_token = 11 [ json_name = "access_token" ];

  // The currently valid refresh token for this session. I
  StoredToken refresh_token = 12 [ json_name = "refresh_token" ];

  // The time the whole session should be expired at. It should be garbage
  // collected at this time.
  google.protobuf.Timestamp expires_at = 13 [ json_name = "expires_at" ];

  // reserving the first two fields for future expansion. If we need to change
  // the persisted schema, we may be able to use these to peek at the message
  // type, or implement self-describing messages.
  reserved 1, 2;
}

// StoredToken represents the session-persisted state of a token
// we issued to a user
message StoredToken {
  // bcrypted version of the token that was issued to the user
  bytes bcrypted = 1 [ json_name = "bcrypted" ];
  // when this token expires
  google.protobuf.Timestamp expires_at = 2 [ json_name = "expires_at" ];
}

// UserToken is the value we issue directly to users. The message is serialized,
// then base64 encoded to make up the issued version.
message UserToken {
  // the ID of the session this token corresponds to
  string session_id = 1 [ json_name = "session_id" ];
  // the token itself, to be compared to the bcrypt version on the backend
  bytes token = 2 [ json_name = "token" ];
}
